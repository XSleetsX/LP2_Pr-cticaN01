#include <iostream>
#include <fstream>
#include <string>

using namespace std;

// Clase base Producto
class Producto {
protected:
    string codigo_barras; // Código de barras del producto
    string nombre; // Nombre del producto
    float precio; // Precio del producto

public:
    // Constructor de Producto que inicializa los atributos
    Producto(string codigo_barras, string nombre, float precio)
        : codigo_barras(codigo_barras), nombre(nombre), precio(precio) {}

    // Método virtual puro para mostrar detalles del producto
    virtual void mostrarDetalles() const = 0;

    // Método virtual puro para serializar los datos del producto
    virtual string serializar() const = 0;

    // Getters para los atributos del producto
    string get_codigo_barras() const { return codigo_barras; }
    string get_nombre() const { return nombre; }
    float get_precio() const { return precio; }
};

// Clase derivada Libro que hereda de Producto
class Libro : public Producto {
private:
    string autor; // Autor del libro
    int num_paginas; // Número de páginas del libro

public:
    // Constructor de Libro que inicializa los atributos del libro y los de la clase base Producto
    Libro(string codigo_barras, string nombre, float precio, string autor, int num_paginas)
        : Producto(codigo_barras, nombre, precio), autor(autor), num_paginas(num_paginas) {}

    // Implementación del método mostrarDetalles para la clase Libro
    void mostrarDetalles() const override {
        cout << "Codigo de Barras: " << get_codigo_barras()
             << ", Nombre: " << get_nombre()
             << ", Precio: " << get_precio()
             << ", Autor: " << autor
             << ", Numero de Paginas: " << num_paginas << endl;
    }

    // Implementación del método serializar para la clase Libro
    string serializar() const override {
        return "Libro " + codigo_barras + " " + nombre + " " + to_string(precio) + " " + autor + " " + to_string(num_paginas);
    }
};

// Clase derivada Electronico que hereda de Producto
class Electronico : public Producto {
private:
    string marca; // Marca del producto electrónico
    string modelo; // Modelo del producto electrónico

public:
    // Constructor de Electronico que inicializa los atributos del producto electrónico y los de la clase base Producto
    Electronico(string codigo_barras, string nombre, float precio, string marca, string modelo)
        : Producto(codigo_barras, nombre, precio), marca(marca), modelo(modelo) {}

    // Implementación del método mostrarDetalles para la clase Electronico
    void mostrarDetalles() const override {
        cout << "Codigo de Barras: " << get_codigo_barras()
             << ", Nombre: " << get_nombre()
             << ", Precio: " << get_precio()
             << ", Marca: " << marca
             << ", Modelo: " << modelo << endl;
    }

    // Implementación del método serializar para la clase Electronico
    string serializar() const override {
        return "Electronico " + codigo_barras + " " + nombre + " " + to_string(precio) + " " + marca + " " + modelo;
    }

    // Método getter para el modelo del producto electrónico
    string get_modelo() const {
        return modelo;
    }
};

// Clase derivada Ropa que hereda de Producto
class Ropa : public Producto {
private:
    string talla; // Talla de la prenda de ropa
    string color; // Color de la prenda de ropa

public:
    // Constructor de Ropa que inicializa los atributos de la prenda de ropa y los de la clase base Producto
    Ropa(string codigo_barras, string nombre, float precio, string talla, string color)
        : Producto(codigo_barras, nombre, precio), talla(talla), color(color) {}

    // Implementación del método mostrarDetalles para la clase Ropa
    void mostrarDetalles() const override {
        cout << "Codigo de Barras: " << get_codigo_barras()
             << ", Nombre: " << get_nombre()
             << ", Precio: " << get_precio()
             << ", Talla: " << talla
             << ", Color: " << color << endl;
    }

    // Implementación del método serializar para la clase Ropa
    string serializar() const override {
        return "Ropa " + codigo_barras + " " + nombre + " " + to_string(precio) + " " + talla + " " + color;
    }
};

// Clase template Inventario para almacenar productos de cualquier tipo
template <typename T>
class Inventario {
private:
    T* productos[100]; // Array para almacenar punteros a productos
    int num_productos; // Número de productos en el inventario

public:
    // Constructor de Inventario que inicializa el numero de productos
    Inventario() : num_productos(0) {}

    // Método para agregar un producto al inventario
    void agregarProducto(T* producto) {
        bool existe = false;
        // Verificar si el producto ya existe en el inventario
        for (int i = 0; i < num_productos; i++) {
            if (productos[i]->get_codigo_barras() == producto->get_codigo_barras()) {
                existe = true;
                break;
            }
        }
        // Si el producto no existe, agregarlo al inventario
        if (!existe) {
            productos[num_productos++] = producto;
            cout << "Producto agregado con exito." << endl;
        } else {
            cout << "El producto ya existe en el inventario." << endl;
        }
    }

    // Método para eliminar un producto del inventario
    void eliminarProducto(string codigo_barras) {
        for (int i = 0; i < num_productos; i++) {
            if (productos[i]->get_codigo_barras() == codigo_barras) {
                delete productos[i];
                // Desplazar los productos para llenar el hueco dejado por el producto eliminado
                for (int j = i; j < num_productos - 1; j++) {
                    productos[j] = productos[j + 1];
                }
                num_productos--;
                cout << "Producto eliminado con exito." << endl;
                return;
            }
        }
        cout << "El producto no existe en el inventario." << endl;
    }

    // Método para buscar un producto en el inventario
    void buscarProducto(string codigo_barras) const {
        for (int i = 0; i < num_productos; i++) {
            if (productos[i]->get_codigo_barras() == codigo_barras) {
                productos[i]->mostrarDetalles();
                return;
            }
        }
        cout << "El producto no existe en el inventario." << endl;
    }

    // Método para listar todos los productos en el inventario
    void listarProductos() const {
        for (int i = 0; i < num_productos; i++) {
            productos[i]->mostrarDetalles();
        }
    }

    // Método para guardar el inventario en un archivo de texto
    void cargarInventario() {
        ifstream archivo("reportes.txt");
        if (archivo.is_open()) {
            try {
                string tipo;
                while (archivo >> tipo) {
                    string codigo_barras, nombre;
                    float precio;

                    archivo >> codigo_barras >> nombre >> precio;

                    if (archivo.fail()) {
                        throw runtime_error("Error: Formato incorrecto al leer datos del archivo.");
                    }

                    if (tipo == "Libro") {
                        string autor;
                        int num_paginas;
                        archivo >> autor >> num_paginas;
                        if (archivo.fail()) {
                            throw runtime_error("Error: Formato incorrecto para datos de Libro.");
                        }
                        agregarProducto(new Libro(codigo_barras, nombre, precio, autor, num_paginas));
                    } else if (tipo == "Electronico") {
                        string marca, modelo;
                        archivo >> marca >> modelo;
                        if (archivo.fail()) {
                            throw runtime_error("Error: Formato incorrecto para datos de Electronico.");
                        }
                        agregarProducto(new Electronico(codigo_barras, nombre, precio, marca, modelo));
                    } else if (tipo == "Ropa") {
                        string talla, color;
                        archivo >> talla >> color;
                        if (archivo.fail()) {
                            throw runtime_error("Error: Formato incorrecto para datos de Ropa.");
                        }
                        agregarProducto(new Ropa(codigo_barras, nombre, precio, talla, color));
                    } else {
                        throw runtime_error("Error: Tipo de producto desconocido en el archivo.");
                    }
                }
                archivo.close();
                cout << "Inventario cargado exitosamente desde reportes.txt." << endl;
            } catch (const exception& e) {
                cerr << e.what() << endl;
                archivo.close();
            }
        } else {
            cout << "No se pudo abrir el archivo reportes.txt para cargar el inventario." << endl;
        }
    }


    // Método para cargar el inventario desde un archivo de texto
    void guardarInventario() const {
        ofstream archivo("reportes.txt");
        if (archivo.is_open()) {
            try {
                for (int i = 0; i < num_productos; i++) {
                    archivo << productos[i]->serializar() << endl;
                    if (archivo.fail()) {
                        throw runtime_error("Error: Fallo al escribir en el archivo.");
                    }
                }
                archivo.close();
                cout << "Inventario guardado exitosamente en reportes.txt." << endl;
            } catch (const exception& e) {
                cerr << e.what() << endl;
                archivo.close();
            }
        } else {
            cout << "No se pudo abrir el archivo reportes.txt para guardar el inventario." << endl;
        }
    }


    // Método para verificar si un código de barras ya existe en el inventario
    bool existeCodigoBarras(const string& codigo) const {
        for (int i = 0; i < num_productos; i++) {
            if (productos[i]->get_codigo_barras() == codigo) {
                return true;
            }
        }
        return false;
    }

    // Método para verificar si un nombre ya existe en el inventario
    bool existeNombre(const string& nombre) const {
        for (int i = 0; i < num_productos; i++) {
            if (productos[i]->get_nombre() == nombre) {
                return true;
            }
        }
        return false;
    }

    // Método para verificar si un modelo ya existe en el inventario (solo para electrónicos)
    bool existeModelo(const string& modelo) const {
        for (int i = 0; i < num_productos; i++) {
            Electronico* electronico = dynamic_cast<Electronico*>(productos[i]);
            if (electronico != nullptr && electronico->get_modelo() == modelo) {
                return true;
            }
        }
        return false;
    }
};

// Función para validar el código de barras
bool validarCodigoBarras(string codigo_barras) {
    if (codigo_barras.length() != 6) {
        cout << "Error: El codigo de barras debe tener 6 caracteres." << endl;
        return false;
    }
    return true;
}

// Función para leer una opción de menú con validación de entrada
int leerOpcion() {
    string entrada;
    int opcion;
    while (true) {
        cout << "Opcion: ";
        cin >> entrada;
        try {
            opcion = stoi(entrada); // Convertir la entrada a un número
            break; // Salir del bucle si la conversión es exitosa
        } catch (invalid_argument&) {
            cout << "Entrada invalida. Por favor, ingrese un numero." << endl;
        }
    }
    return opcion;
}

int main() {
    Inventario<Producto> inventario; // Crear un inventario para productos

    // Cargar inventario desde archivo al inicio
    inventario.cargarInventario();

    int opcion;
    do {
        // Mostrar menú de opciones
        cout << "\nMenu:" << endl;
        cout << "1. Agregar producto" << endl;
        cout << "2. Eliminar producto" << endl;
        cout << "3. Buscar producto" << endl;
        cout << "4. Listar productos" << endl;
        cout << "5. Guardar inventario" << endl;
        cout << "6. Cargar inventario desde archivo" << endl;
        cout << "7. Salir" << endl;

        opcion = leerOpcion();

        switch (opcion) {
            case 1: {
                // Agregar un producto
                string codigo_barras, nombre;
                float precio;
                cout << "Ingrese codigo de barras: ";
                cin >> codigo_barras;

                // Validar el código de barras
                if (!validarCodigoBarras(codigo_barras)) {
                    break;
                }

                // Verificar si el código de barras ya existe
                if (inventario.existeCodigoBarras(codigo_barras)) {
                    cout << "Error: El codigo de barras ya existe." << endl;
                    break;
                }

                cout << "Ingrese nombre: ";
                cin.ignore();
                getline(cin, nombre);

                // Verificar si el nombre ya existe
                if (inventario.existeNombre(nombre)) {
                    cout << "Error: El nombre ya existe." << endl;
                    break;
                }

                cout << "Ingrese precio: ";
                cin >> precio;

                int tipo_producto;
                cout << "Ingrese tipo de producto (1. Libro, 2. Electronico, 3. Ropa): ";
                tipo_producto = leerOpcion();

                switch (tipo_producto) {
                    case 1: {
                        // Agregar un libro
                        string autor;
                        int num_paginas;
                        cout << "Ingrese autor: ";
                        cin.ignore();
                        getline(cin, autor);
                        
                        cout << "Ingrese numero de paginas: ";
                        cin >> num_paginas;

                        // Validar número de páginas
                        if (num_paginas < 0) {
                            cout << "Error: El numero de paginas no puede ser negativo." << endl;
                            break;
                        }

                        inventario.agregarProducto(new Libro(codigo_barras, nombre, precio, autor, num_paginas));
                        break;
                    }
                    case 2: {
                        // Agregar un producto electrónico
                        string marca, modelo;
                        cout << "Ingrese marca: ";
                        cin.ignore();
                        getline(cin, marca);
                        cout << "Ingrese modelo: ";
                        getline(cin, modelo);

                        // Verificar si el modelo ya existe
                        if (inventario.existeModelo(modelo)) {
                            cout << "Error: El modelo ya existe." << endl;
                            break;
                        }

                        inventario.agregarProducto(new Electronico(codigo_barras, nombre, precio, marca, modelo));
                        break;
                    }
                    case 3: {
                        // Agregar una prenda de ropa
                        string talla, color;
                        cout << "Ingrese talla: ";
                        cin >> talla;

                        // Validar talla
                        if (talla != "S" && talla != "M" && talla != "L" && talla != "XL" && talla != "XXL" && talla != "XXXL") {
                            cout << "Error: Talla invalida. Debe ser una de las siguientes: S, M, L, XL, XXL, XXXL." << endl;
                            break;
                        }

                        cout << "Ingrese color: ";
                        cin.ignore();
                        getline(cin, color);
                        inventario.agregarProducto(new Ropa(codigo_barras, nombre, precio, talla, color));
                        break;
                    }
                    default:
                        cout << "Opcion invalida." << endl;
                        break;
                }

                break;
            }
            case 2: {
                // Eliminar un producto
                string codigo_barras;
                cout << "Ingrese codigo de barras del producto a eliminar: ";
                cin >> codigo_barras;
                inventario.eliminarProducto(codigo_barras);
                break;
            }
            case 3: {
                // Buscar un producto
                string codigo_barras;
                cout << "Ingrese codigo de barras del producto a buscar: ";
                cin >> codigo_barras;
                inventario.buscarProducto(codigo_barras);
                break;
            }
            case 4:
                // Listar todos los productos
                inventario.listarProductos();
                break;
            case 5:
                // Guardar inventario en archivo
                inventario.guardarInventario();
                break;
            case 6:
                // Cargar inventario desde archivo
                inventario.cargarInventario();
                break;
            case 7:
                // Salir del programa
                cout << "Saliendo del programa." << endl;
                break;
            default:
                cout << "Opcion invalida." << endl;
                break;
        }
    } while (opcion != 7);

    return 0;
}
